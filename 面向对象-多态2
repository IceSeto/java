package mypolymorphism.polymorphismtest;

public class Animal {
    private String color;
    private int age;


    public void eat(String sth){
        System.out.println("动物在吃" + sth);
    }
    public Animal() {
    }

    public Animal(String color, int age) {
        this.color = color;
        this.age = age;
    }

    /**
     * 获取
     * @return color
     */
    public String getColor() {
        return color;
    }

    /**
     * 设置
     * @param color
     */
    public void setColor(String color) {
        this.color = color;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Animal{color = " + color + ", age = " + age + "}";
    }
}
package mypolymorphism.polymorphismtest;

public class Cat extends Animal{
    public Cat(){}
    @Override
    public void eat(String sth) {
        System.out.println(getAge()+"岁的"+getColor()+"色的"+"猫在吃"+sth);
    }

    public void catchMouse(){
        System.out.println("猫在抓老鼠");

    }
    public Cat(String color, int age){
        super(color,age);
    }
}
package mypolymorphism.polymorphismtest;

public class Dog extends Animal{
    public Dog(){}
    @Override
    public void eat(String sth) {
        System.out.println(getAge()+"岁的"+getColor()+"色的"+"狗在吃"+sth);
    }

    public void lookHome(){
        System.out.println("狗在看家");

    }
    public Dog(String color, int age){
        super(color,age);
    }

}
package mypolymorphism.polymorphismtest;

public class Person {
    private String name;
    private int age;

/*    public void keepPet(Dog d,String sth){
        System.out.println("年龄为"+getAge()+"岁的"+getName()+"养了一只"+d.getColor()+"颜色的"+d.getAge()+"岁的狗");
        d.eat(sth);
    }
    public void keepPet(Cat c,String sth){
        System.out.println("年龄为"+getAge()+"岁的"+getName()+"养了一只"+c.getColor()+"颜色的"+c.getAge()+"岁的猫");
        c.eat(sth);
    }*/
    //想要一个方法，能接收所有的动物，包括猫，包括狗//方法的形参: 可以写这些类的父类 Animal

    public void keepPet(Animal a,String sth){
        if (a instanceof Dog){
            System.out.println("年龄为"+getAge()+"岁的"+getName()+"养了一只"+a.getColor()+"颜色的"+a.getAge()+"岁的狗");
            a.eat(sth);
            ((Dog) a).lookHome();
        }else if(a instanceof Cat){
            System.out.println("年龄为"+getAge()+"岁的"+getName()+"养了一只"+a.getColor()+"颜色的"+a.getAge()+"岁的猫");
            a.eat(sth);
            ((Cat) a).catchMouse();
        }

    }
    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
package mypolymorphism.polymorphismtest;

public class Test {
    public static void main(String[] args) {
        Person p1 = new Person("老王",45);
        Person p2 = new Person("老王",45);
        Dog d = new Dog("黑",2);
        Cat c = new Cat("灰",1);

        Animal a = new Dog("蓝",3);
        p1.keepPet(d,"骨头");
        p1.keepPet(c,"鱼干");
        if (a instanceof Dog){
            Dog a1 = (Dog) a;
            p2.keepPet(a1,"骨头");
        }else if (a instanceof Cat){
            Cat a1 = (Cat) a;
            p2.keepPet(a1,"鱼干");
        }else{
            System.out.println("没有这种类型");
        }

    }
}
