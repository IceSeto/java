1.方法重载
在同一个类中，方法名相同，参数不同的方法 ————构成方法重载。与返回值无关 
参数不同 数量不同 位置不同
方法调用的基本原理————栈
new ————堆
栈 先进后出 
main方法先进 然后依次执行每一行 每个方法中的代码执行完后 出栈
基本数据类型是存储在自己空间里的           引用数据类型是存储在别的空间里的 自己空间里是地址
整数类型                                除左边外全是
浮点数类型                              new的是引用数据类型 int[] arr = new int[];
布尔类型                                引用数据类型中存放的是地址
字符类型                                引用是指引用了其他空间中的数据
package new1.test;

public class Test4 {
    public static void main(String[] args) {

        /*需求: 使用方法重载的思想，设计比较两个整数是否相同的方法要求:
         兼容全整数类型 (byte,short,int,long)*/
        //调用
        compare(10,20);
        compare((byte)(10),(byte)(20));

    }
    //把相同功能的方法名写成一样的
    public static void compare(byte b1,byte b2){
        if(b1 == b2){
            System.out.println("两个byte类型的数相等");
        }else{
            System.out.println("两个byte类型的数不相等");
        }
    }
    public static void compare(int i1,int i2){
        if(i1 == i2){
            System.out.println("两个int类型的数相等");
        }else{
            System.out.println("两个int类型的数不相等");
        }
    }
    public static void compare(short s1,short s2){
        if(s1 == s2){
            System.out.println("两个short类型的数相等");
        }else{
            System.out.println("两个short类型的数不相等");
        }
    }
    public static void compare(long n1,long n2){
        if(n1 == n2){
            System.out.println("两个long类型的数相等");
        }else{
            System.out.println("两个long类型的数不相等");
        }
    }
}
package new1.test;

public class Test5 {
    public static void main(String[] args) {
        int[] arr = {11, 22, 33, 44, 55};
        printArr(arr);
    }

    //定义方法用于数组遍历
    //1.我要干嘛  遍历数组
    //2.需要什么才能完成 数组
    //3.调用处是否需要继续使用结果 不需要
    public static void printArr(int[] arr) {
        System.out.print("[");
        for (int i = 0; i < arr.length; i++) {
            if (i == arr.length - 1) {
                System.out.print(arr[i]);
            } else {
                System.out.print(arr[i] + ", ");
            }
        }
        System.out.print("]");
    }
}
package new1.test;

public class Test6 {
    public static void main(String[] args) {
        //定义数组
        int arr[] = {1, 3, 5, 2, 7, 9};
        //调用方法求最大值
        int max = getMax(arr);
        System.out.println(max);
    }

    //1要干嘛
    //2需要什么
    //3调用出是否需要返回
    public static int getMax(int[] arr) {
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
}
package new1.test;

public class Test7 {
    public static void main(String[] args) {
        //定义数组
        int arr[] = {1, 6, 7, 4, 9, 22, 34};
        boolean falg = contains(arr, 22);
        System.out.println(falg);
    }

    public static boolean contains(int arr[], int number) {
        for (int i = 0; i < arr.length; i++) {
            if (number == arr[i]) {
                return true;
            }
        }
        return false;
    }
}

//return break 的区别
//return其实跟循环没有什么关系，跟方法有关的，表示1结束方法 2返回结果
//      如果方法执行到了return，那么整个方法全部结束，里面的循环也会随之结束了

//break 跟方法没有什么关系，结束循环或者switch
package new1.test;
/*  需求
    定义一个方法copyofRange(int[] arr,int from，int to)功能:
    将数组arr中从索引from (包含from) 开始。
    到索引to结束(不包含to) 的元素复制到新数组中，将新数组返回。*/
public class Test8 {
    public static void main(String[] args) {
        //定义原始数组
        int arr1[] = {97, 48, 67, 482, 23, 137, 27, 54};
        //调用方法
        int[] copyArr = copyOfRange(arr1, 2, 7);
        //遍历数组
        for (int i = 0; i < copyArr.length; i++) {
            System.out.print(copyArr[i] + ",");
        }
    }

    public static int[] copyOfRange(int arr[], int from, int to) {
        int[] newarr = new int[to - from];
        //伪造索引的思想
        int index = 0;
        for (int i = from; i < to; i++) {
            newarr[index] = arr[i];
            index++;
        }
        return newarr;
    }
}

