类(设计图):是对象共同特征的描述
对象:是真实存在的具体东西。
在Java中，必须先设计类，才能获得对象。
public class 类名{
1、成员变量 (代表属性，一般是名词)
2、成员方法 (代表行为，一般是动词)3、构造器(后面学习)
4、代码块(后面学习)
5、内类(后面学习)
}
定义类的补充注意事项
用来描述一类事物的类，专业叫做:Javabean类
在Javabean类中，是不写main方法的。
在以前，编写main方法的类，叫做测试类
我们可以在测试类中创建javabean类的对象并进行赋值调用
类名首字母建议大写，需要见名知意，驼峰模式。j
ava文件中可以定义多个class类，且只能一个类是public修饰，
而且public修饰的类名必须成为代码文件名
实际开发中建议还是一个文件定义一个class类
成员变量的完整定义格式是:修饰符 数据类型 变量名称 = 初始化值;
一般无需指定初始化值，存在默认值。
数据类型                 明细                  默认值
基本类型          byte、short、int、long         0
                      float、double            0.0
                        boolean               false
引用类型           类、接口、数组、string         null
package src.Test2;

public class GirlFriend {
    //属性
    private String name;
    private int age;


    


    //行为
    public void sleep() {
        System.out.println("女朋友在睡觉");
    }

    public void eat() {
        System.out.println("女朋友在吃饭");
    }
}

package src.Test2;

public class GirlFriendTest {
    public static void main(String[] args) {
        //创建女朋友对象
        GirlFriend gf1 = new GirlFriend();
        gf1.name = "LX";
        gf1.age = 19;


        System.out.println(gf1.name);
        System.out.println(gf1.age);

        gf1.sleep();
        gf1.eat();

        System.out.println("==========================");
        GirlFriend gf2 = new GirlFriend();
        gf2.name = "二";
        gf2.age = 19;


        System.out.println(gf2.name);
        System.out.println(gf2.age);

        gf2.sleep();
        gf2.eat();
    }
}


封装：告诉我们，如何正确设计对象的属性和方法
对象代表什么，就得封装对应的数据，并提供数据对应的行为
降低我们的学习成本，可以少学、少记，或者说压根不用学，不用记对象有哪些方法，有需要时去找就行
private 修饰符
是一个权限修饰符
可以修饰成员(成员变量和成员方法)
被private修饰的成员只能在本类中才能访问
package src.Test2;

public class GirlFriend {
    //属性
    private String name;
    private int age;


    //针对于每个私有的变量提供get set方法
    //set方法赋值
    //get对外提供值

    //给name赋值
    public void setName(String n) {
        name = n;
    }
    public String getName(){
        return name;
    }

    public void setAge(int a) {
        if (a>=18&&a<=50){
            age = a;
        }else{
            System.out.println("非法参数");
        }
    }
    public int getAge(){
        return age;
    }


    //行为
    public void sleep() {
        System.out.println("女朋友在睡觉");
    }

    public void eat() {
        System.out.println("女朋友在吃饭");
    }
}
package src.Test2;

public class GirlFriendTest {
    public static void main(String[] args) {
        //创建女朋友对象
        GirlFriend gf1 = new GirlFriend();
        gf1.setAge(19);
        gf1.setName("lx");

        System.out.println(gf1.getAge());
        System.out.println(gf1.getName());
        gf1.eat();
        gf1.sleep();
    }
}

当成员变量与局部变量相同时 就近原则 要想使用成员变量 就要用this.
this关键字





















