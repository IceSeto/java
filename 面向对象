类(设计图):是对象共同特征的描述
对象:是真实存在的具体东西。
在Java中，必须先设计类，才能获得对象。
public class 类名{
1、成员变量 (代表属性，一般是名词)
2、成员方法 (代表行为，一般是动词)3、构造器(后面学习)
4、代码块(后面学习)
5、内类(后面学习)
}
定义类的补充注意事项
用来描述一类事物的类，专业叫做:Javabean类
在Javabean类中，是不写main方法的。
在以前，编写main方法的类，叫做测试类
我们可以在测试类中创建javabean类的对象并进行赋值调用
类名首字母建议大写，需要见名知意，驼峰模式。j
ava文件中可以定义多个class类，且只能一个类是public修饰，
而且public修饰的类名必须成为代码文件名
实际开发中建议还是一个文件定义一个class类
成员变量的完整定义格式是:修饰符 数据类型 变量名称 = 初始化值;
一般无需指定初始化值，存在默认值。
数据类型                 明细                  默认值
基本类型          byte、short、int、long         0
                      float、double            0.0
                        boolean               false
引用类型           类、接口、数组、string         null
package src.Test2;

public class GirlFriend {
    //属性
    private String name;
    private int age;


    


    //行为
    public void sleep() {
        System.out.println("女朋友在睡觉");
    }

    public void eat() {
        System.out.println("女朋友在吃饭");
    }
}

package src.Test2;

public class GirlFriendTest {
    public static void main(String[] args) {
        //创建女朋友对象
        GirlFriend gf1 = new GirlFriend();
        gf1.name = "LX";
        gf1.age = 19;


        System.out.println(gf1.name);
        System.out.println(gf1.age);

        gf1.sleep();
        gf1.eat();

        System.out.println("==========================");
        GirlFriend gf2 = new GirlFriend();
        gf2.name = "二";
        gf2.age = 19;


        System.out.println(gf2.name);
        System.out.println(gf2.age);

        gf2.sleep();
        gf2.eat();
    }
}


封装：告诉我们，如何正确设计对象的属性和方法
对象代表什么，就得封装对应的数据，并提供数据对应的行为
降低我们的学习成本，可以少学、少记，或者说压根不用学，不用记对象有哪些方法，有需要时去找就行
private 修饰符
是一个权限修饰符
可以修饰成员(成员变量和成员方法)
被private修饰的成员只能在本类中才能访问
package src.Test2;

public class GirlFriend {
    //属性
    private String name;
    private int age;


    //针对于每个私有的变量提供get set方法
    //set方法赋值
    //get对外提供值

    //给name赋值
    public void setName(String n) {
        name = n;
    }
    public String getName(){
        return name;
    }

    public void setAge(int a) {
        if (a>=18&&a<=50){
            age = a;
        }else{
            System.out.println("非法参数");
        }
    }
    public int getAge(){
        return age;
    }


    //行为
    public void sleep() {
        System.out.println("女朋友在睡觉");
    }

    public void eat() {
        System.out.println("女朋友在吃饭");
    }
}
package src.Test2;

public class GirlFriendTest {
    public static void main(String[] args) {
        //创建女朋友对象
        GirlFriend gf1 = new GirlFriend();
        gf1.setAge(19);
        gf1.setName("lx");

        System.out.println(gf1.getAge());
        System.out.println(gf1.getName());
        gf1.eat();
        gf1.sleep();
    }
}


package src.Test3;

public class GrilFriend {

    private int age;//0

    public void method(){
        int age = 10;//10
        System.out.println(age);
        System.out.println(this.age);
    }
}

package src.Test3;

public class GrilFriend {

    private int age;//0

    public void method(){
        int age = 10;//10
        System.out.println(age);
        System.out.println(this.age);
    }
}

当成员变量与局部变量相同时 就近原则 要想使用成员变量 就要用this.
this关键字
this的作用: 区分局部变量和成员变量
this的本质: 所在方法调用者的地址值
构造方法
方法名与类名相同，大小写也要一致
没有返回值类型，连void都没有
没有具体的返回值 (不能由retrun带回结果数据

创建对象的时候由虚拟机调用，不能手动调用构造方法每创建一次对象，就会调用一次构造方法

构造方法的定义
如果没有定义构造方法，系统将给出一个默认的无参数构造方法如果定义了构造方法，系统将不再提供默认的构造方法
构造方法的重载
带参构造方法，和无参数构造方法，两者方法名相同，但是参数不同，这叫做构造方法的重载
推荐的使用方式
无论是否使用，都手动书写无参数构造方法，和带全部参数的构造方法
创造对象的时候，虚拟机会自动调用构造方法，作用是给成员变量进行初始化的

标准的JavaBean类
类名需要见名知意
成员变量使用private修饰
提供至少两个构造方法
无参构造方法
带全部参数的构造方法
成员方法
提供每一个成员变量对应的setXxx()/getXxx()如果还有其他行为，也需要写上
package src.Test5;

public class Student {
    private String name;


    private int age;

    //如果没有写任何构造方法
    //虚拟机会给我们加一个空参构造方法
    public Student(){
        System.out.println("执行");
    }
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }


}
package src.Test5;

public class StudentTest {
    public static void main(String[] args) {
        //创建对象
        //调用空参构造
        Student s = new Student();
        //调用有参构造
        Student s1 = new Student("张三",23);
        System.out.println(s1.getName());
        System.out.println(s1.getAge());
    }
}

标准javabean
package src.Test6;

public class User {
    //属性
    private String name;
    private String password;
    private String emill;
    private char gender;
    private int age;
    //空参

    public User() {}

    //带全部参数
    //快捷键 alt+insert
    //插件PTG 1秒生成标准Javabean
    public User(String name, String password, String emill, char gender, int age) {
        this.name = name;
        this.password = password;
        this.emill = emill;
        this.gender = gender;
        this.age = age;
    }

    //getset方法

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmill() {
        return emill;
    }

    public void setEmill(String emill) {
        this.emill = emill;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

package src.Test6;

public class UserTest {
}

















