package src.api.stringtest;

import java.util.Scanner;

public class Test1Case1 {
    public static void main(String[] args) {
        //转换罗马数字
        //键盘录入一个字符串
        //要求1:长度为小于等于9
        //要求2:只能是数字
        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系
        //1-1、Il - 2、1ll- 3、IV -4、V -5、V- 6、VI - 7、VIl - 8、X -9注意点:
        //罗马数字里面是没有0的如果键盘录入的数字包含0，可以变成”"(长度为0的字符串)
        Scanner sc = new Scanner(System.in);
        String str = "";
        while (true) {
            str = sc.next();
            boolean flag = checkStr(str);
            if (flag) {
                break;
            } else {
                System.out.println("当前字符串不符合规则，请重新输入");
                continue;
            }
        }
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            sb.append(changeLuoMa(str.charAt(i)));
        }
        result = sb.toString();
        System.out.println(result);
    }

    public static String changeLuoMa(char a) {
        String result = "";
        String[] arr = {"","I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"};
        result = arr[a - 48];
        return result;
    }

    public static boolean checkStr(String str) {
        if (str.length() > 9) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) < '0' || str.charAt(i) > '9') {
                return false;
            }
        }
        return true;
    }
}
package src.api.stringtest;

import java.util.Scanner;

public class Test1Case2 {
    public static void main(String[] args) {
        //转换罗马数字
        //键盘录入一个字符串
        //要求1:长度为小于等于9
        //要求2:只能是数字
        //将内容变成罗马数字
        //下面是阿拉伯数字跟罗马数字的对比关系
        //1-1、Il - 2、1ll- 3、IV -4、V -5、V- 6、VI - 7、VIl - 8、X -9注意点:
        //罗马数字里面是没有0的如果键盘录入的数字包含0，可以变成”"(长度为0的字符串)
        Scanner sc = new Scanner(System.in);
        String str = "";
        while (true) {
            str = sc.next();
            boolean flag = checkStr(str);
            if (flag) {
                break;
            } else {
                System.out.println("当前字符串不符合规则，请重新输入");
                continue;
            }
        }
        String result = "";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            sb.append(changeLuoMa(str.charAt(i)));
        }
        result = sb.toString();
        System.out.println(result);
    }

    //利用swtich语句
    public static String changeLuoMa(char number) {
        String result = "";
        switch(number){
            case '1' -> result = "I";
            case '2' -> result = "II";
            case '3' -> result = "III";
            case '4' -> result = "IV";
            case '5' -> result = "V";
            case '6' -> result = "VI";
            case '7' -> result = "VII";
            case '8' -> result = "VIII";
            case '9' -> result = "IX";
            default -> result = "";
        }
        return result;
    }

    public static boolean checkStr(String str) {
        if (str.length() > 9) {
            return false;
        }
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) < '0' || str.charAt(i) > '9') {
                return false;
            }
        }
        return true;
    }
}
package src.api.stringtest;

public class Test2Case1 {
    public static void main(String[] args) {
        /*
         *给定两个字符串，A和BA的旋转操作就是将A 最左边的字符移动到最右边。
         例如，若A =abcde'，在移动一次之后结果就是'bcdea
         如果在若干次调整操作之后，A能变成B，那么返回True。
         如果不能匹配成功，则返回false
         */
        String str1 = "abcdef";
        String str2 = "cdefab";
        boolean result = check(str1, str2);
        System.out.println(result);
    }
    //套路:
    //如果我们看到要修改字符串的内容
    //可以有两个办法:
    //1.用substring进行截取，把左边的字符截取出来拼接到右侧去
    //2.可以把字符串先变成一个字符数组，然后调整字符数组里面数据，最后再把字符数组变成字符串。
    //作用: 旋转字符串，把左侧的字符移动到右侧去
        //形参: 旋转前的字符串
        //返回值: 旋转后的字符串
    public static String rotate(String str){
        StringBuilder sb = new StringBuilder(str.substring(1));
        sb.append(str.charAt(0));
        return sb.toString();
    }
    public static boolean check(String str1 , String str2){
        for (int i = 0; i < str1.length(); i++) {
            str1 = rotate(str1);
            if (str1.equals(str2)){
                return true;
            }
        }
        return false;
    }
}
package src.api.stringtest;

public class Test2Case2 {
    public static void main(String[] args) {
        /*
         *给定两个字符串，A和BA的旋转操作就是将A 最左边的字符移动到最右边。
         例如，若A =abcde'，在移动一次之后结果就是'bcdea
         如果在若干次调整操作之后，A能变成B，那么返回True。
         如果不能匹配成功，则返回false
         */
        String str1 = "abcdef";
        String str2 = "cdefab";
        boolean result = check(str1, str2);
        System.out.println(result);
    }
    //套路:
    //如果我们看到要修改字符串的内容
    //可以有两个办法:
    //1.用substring进行截取，把左边的字符截取出来拼接到右侧去
    //作用: 旋转字符串，把左侧的字符移动到右侧去
    //形参: 旋转前的字符串
    //返回值: 旋转后的字符串

    //2.可以把字符串先变成一个字符数组，然后调整字符数组里面数据，最后再把字符数组变成字符串。

    public static String rotate(String str){

        //"ABC" --> [A,B,C]
        char[] arr = str.toCharArray();
        //拿到第一个
        char first = arr[0];
        for (int i = 1; i < arr.length; i++) {
            arr[i-1] = arr[i];
        }

        // 第一个放回
        arr[arr.length-1] = first;
        return new String(arr);
    }



    public static boolean check(String str1 , String str2){
        for (int i = 0; i < str1.length(); i++) {
            str1 = rotate(str1);
            if (str1.equals(str2)){
                return true;
            }
        }
        return false;
    }
}
package src.api.stringtest;

import java.util.Random;

public class Test3 {
    public static void main(String[] args) {
        //随意输入一个字符串 打乱里面的内容
        String str = "abcdefg";

        //打乱
        //修改字符串内容
        //1.subString
        //2.变成字符数组

        char[] arr = str.toCharArray();
        Random r = new Random();
        for (int i = 0; i < arr.length; i++) {
            int index = r.nextInt(7);
            char temp = arr[i];
            arr[i] = arr[index];
            arr[index] = temp;
        }
        String result = new String(arr);
        System.out.println(str);
        System.out.println(result);
    }
    public static String rotate(String str){
        StringBuilder sb = new StringBuilder(str.substring(1));
        sb.append(str.charAt(0));
        return sb.toString();
    }
}
package src.api.stringtest;

import java.util.Random;

public class Test4 {
    public static void main(String[] args) {
        //生成验证码
        //内容:可以是小写字母，也可以是大写字母，还可以是数字规则:
        //长度为5
        //内容中是四位字母，1位数字。
        //其中数字只有1位，但是可以出现在任意的位置。
        Random r = new Random();
        StringBuilder sb = new StringBuilder();

        char [] letter = new char[52];
        for (int i = 0; i < 52; i++) {
            letter[i] = (char)r.nextInt(65,91);
            letter[51-i] = (char)r.nextInt(97,123);
        }
        for (int i = 0; i < 4; i++) {
            sb.append(letter[r.nextInt(52)]);
        }
        sb.append(r.nextInt(10));
        System.out.println(sb);
        char[] arr = sb.toString().toCharArray();
        int index = r.nextInt(4);
        char temp = arr[arr.length - 1 ];
        arr[arr.length - 1] = arr[index];
        arr[index] = temp;
        String result = new String(arr);
        System.out.println(result);
    }
}
package src.api.stringtest;

public class Test5 {
    public static void main(String[] args) {
        //注意:需要用已有的知识完成。*/
        ///*给定两个以字符串形式表示的非负整数num1和num2，返回num1和num2的乘积，它们的乘积也表示为字符串形式
        String str1 = "12";
        String str2 = "11";
        int result = getnunmber(str1) * getnunmber(str2);
        System.out.println("\""+result+"\"");
    }

    public static int getnunmber(String str) {
        char[] arr = str.toCharArray();
        int plus = 1;
        int number = 0;
        int i1 = arr[0];
        for (int i = arr.length - 1; i >= 0; i--) {
            number = number + (int) (arr[i] - 48) * plus;
            plus = plus * 10;
        }
        return number;
    }
}
package src.api.stringtest;

public class Test6 {
    public static void main(String[] args) {
        ///*给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。
        //返回字符出中最后一个单词的长度。
        //单词是指仅由字母组成、不包含任何空格字符的最大子字符串。
        String str1 = "fly to the moon";
        String str2 = "hello world";
        System.out.println(getNumber(str2));
        System.out.println(getNumber(str1));

    }
    public static int getNumber(String str){
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == ' '){
                count = 0;
            }else{
                count++;
            }
        }
        return count;
    }
}
