1.什么是多态?
对象的多种形态
2.多态的前提?
有继承/实现关系
有父类引用指向子类对象
有方法的重写
3，多态的好处?
使用父类型作为参数，可以接收所有子类对象体现多态的扩展性与便利。

多态调用成员的特点
变量调用:编译看左边，运行也看左边
方法调用:编译看左边，运行看右边

多态的优势
在多态形式下，右边对象可以实现解耦合，便于扩展和维护
Person p =
new student ();
p.work(); // 业务逻辑发生改变时，后续代码无需修改
定义方法的时候，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。

1.多态的优势
方法中，使用父类型作为参数，可以接收所有子类对象
2.多态的弊端是什么?
不能使用子类的特有功能
引用数据类型的类型转换，有几种方式?
自动类型转换、强制类型转换Person p = new student ();student s = (Student)p;
强制类型转换能解决什么问题?
4.
可以转换成真正的子类类型，从而调用子类独有功能。
转换类型与真实对象类型不一致会报错
转换的时候用instanceof关键字进行判断
package mypolymorphism.polymorphismdemo2;



public class Test {
    public static void main(String[] args) {
        //创建对象
        //多态方式
        //Fu f = new zi();
        Animal a = new Dog();
        //调用成员变量： 编译看左边 运行也看左边
        //编译看左边 javac编译代码的时候 会看左边父类中有没有这个变量 ，有则编译成功 否则编译失败
        //运行也看左边：java运行代码的时候 实际获取的也是左边父类的值
        System.out.println(a.name);


        //调用成员方法 编译看左边 运行看右边
        //编译看左边 javac编译代码的时候 会看左边父类中有没有这个方法 ，有则编译成功 否则编译失败
        //运行也看左边：java运行代码的时候 实际运行的是子类中的方法
        a.show();


        //Animal a = new Dog();
        //以前 Dog d = new Dod();
        //用a来调用变量和方法
        //a是Animal类型的 所以回去Animal类中去找

        //成员变量：在子类的对象中，会把父类的成员变量也继承下来 // 父name 子name
        //成员方法：如果子类对方法进行了重写，那么会在虚方法表中进行覆盖。
    }
}

class Animal {
    String name = "动物";

    public void show() {
        System.out.println("Animal --- show方法");
    }
}

class Dog extends Animal {
    String name = "狗";

    @Override
    public void show() {
        System.out.println("Dog --- show方法");
    }
}

class Cat extends Animal {
    String name = "猎";

    @Override
    public void show() {
        System.out.println("Cat --- show方法");
    }
}
package mypolymorphism.polymorphismdemo3;

import java.util.ArrayList;

public class Test {
    public static void main(String[] args) {
        //多态优势
        /*StringBuilder sb = new StringBuilder();
        //sb.append(); Object obj 可以添加任何类
        ArrayList list = new ArrayList<>();
        //list.add(); Object e 可以添加任何类*/
        //多态弊端
        //不能调用子类特有的功能 lookHome方法
        Animal a = new Dog();
        a.eat();
        //a.lookHome();

        //解决方法
        //把调用者 a 再变回子类类型
        //Dog d = (Dog) a;
        //d.lookHome();

        //细节： 转换的时候不能瞎转，如果转成其他类的类型就会报错
        //例子
        /*if(a instanceof Dog){
            Dog b = (Dog) a;
            d.lookHome();
        }else if(a instanceof Cat){
            Cat c = (Cat) a;
            c.catchMouse();
        }else{
            System.out.println("没有这个类型无法转换");
        }*/

        //新特性
        //先判断 a 是不是 Dog类型 如果是 则强转为Dog类型 转换后变量名为d
        //如果不是 则不强转  返回false
        if(a instanceof Dog d){

            d.lookHome();
        }else if(a instanceof Cat c){

            c.catchMouse();
        }else{
            System.out.println("没有这个类型无法转换");
        }

    }
}

class Animal {
    public void eat() {
        System.out.println("动物在吃东西");
    }
}

class Dog extends Animal {
    @Override
    public void eat() {
        System.out.println("狗在吃骨头");
    }
    public void lookHome(){
        System.out.println("狗在看家");
    }
}

class Cat extends Animal{

    @Override
    public void eat() {
        System.out.println("猫在吃小鱼干");
    }
    public void catchMouse(){
        System.out.println("猫在抓老鼠");
    }
}package mypolymorphism.polymorphismdemo1;

public class Person {
    private String name;
    private int age;

    public void show(){
        System.out.println("name = "+name+"age = ");
    }
    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Person{name = " + name + ", age = " + age + "}";
    }
}
package mypolymorphism.polymorphismdemo1;

public class Student extends Person{
    @Override
    public void show(){
        System.out.println("学生的信息为："+getName()+","+getAge());
    }
}
package mypolymorphism.polymorphismdemo1;

public class Teacher extends Person{
    @Override
    public void show() {
        System.out.println("老师的信息为："+getName()+","+getAge());
    }
}
package mypolymorphism.polymorphismdemo1;

public class Administrator extends Person{
    @Override
    public void show() {
        System.out.println("管理员的信息为："+getName()+","+getAge());
    }
}
package mypolymorphism.polymorphismdemo1;

public class Test {
    public static void main(String[] args) {
        //创建三个对象并调用方法
        Teacher t = new Teacher();

        t.setName("a01");
        t.setAge(19);

        Student s = new Student();

        s.setName("b01");
        s.setAge(20);

        Administrator a = new Administrator();

        a.setAge(30);
        a.setName("c01");
        register(t);
        register(s);
        register(a);
    }



    //这个方法既能接收老师还能接收学生也能接收管理员
    //只能把参数写成这三个类的父类
    public static void register(Person p){
        p.show();
    }
}
