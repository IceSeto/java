3.子类到底能继承父类中的哪些内容? (内存图/内存分析工具)
//误区1: 父类私有的东西，子类就无法继承
//误区2: 父类中非私有的成员，就被子类继承下来了
//构造方法  //非私有 不能  //private 不能
//成员变量  //非私有 能  //private能  //不能直接用  getset
//成员方法  //虚方法表 能  //否则 不能
成员方法是否可以被继承                   只有父类中的虚方法才能被子类继承   虚方法非private非static非final  
A类  方法A                                            B类  方法B                                                    C类  方法C
虚方法表                             继承                   虚方法表                      继承                        虚方法表
在B的基础上再添加自己类中的虚方法                  在C的基础上再添加自己类中的虚方法                                  非private非static非final  

package myextends.extendsdemo2;

public class Test {
    public static void main(String[] args) {
        //空参构造创建子类对象
        Zi z1 = new Zi();

        //带参构造创建子类对象
        //Zi z2 = new Zi("a01",18);
        //子类不能继承父类的构造方法
    }
}

class Fu {
    String name;
    int age;

    public Fu() {
        //如果一个类中没有构造方法，虚拟机会自动的给你添加一个默认的空参构造
    }

    public Fu(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

class Zi extends Fu {}

package myextends.extendsdemo3;

//import org.openjdk.jol.vm.VM;

import java.io.IOException;
import java.util.Scanner;

public class Test {
    public static void main(String[] args) throws IOException {
        Zi z = new Zi();
        //把对象的地址值以十六进制的形式打在控制台上
//        System.out.println(Long.toHexString(VM.current().addressof(z)));
        //内存分析工具需要工具不停止
        Scanner sc = new Scanner(System.in);
        sc.next();
    }
}

class Fu {
    private int a = 0x011;

    int b = 0x022;

    public void fuShow1() {
        System.out.println("publc---fuShow1");
    }

    private void fuShow2() {
        System.out.println("private---fuShow2");
    }
}

class Zi extends Fu {
    int c = 0x033;

    public void ziShow() {
        System.out.println("public--ziShow");
    }
}

package myextends.extendsdemo4;

public class Test {
    public static void main(String[] args) {
        Zi z = new Zi();
        z.zishow();
    }

}
class Ye{
    String name = "Ye";
}
class Fu {
    String name = "Fu";
}

class Zi extends Fu {
    String name = "zi";

    public void zishow() {
        String name = "zishow";
        System.out.println(name);  //zishow
        System.out.println(this.name);  //zi
        System.out.println(super.name); //fu
//        System.out.println(super.super.name); //Ye?
        //没有这种写法
    }
}
package myextends.extendsdemo5;

public class Test {
    public static void main(String[] args) {
        Zi z = new Zi();
        z.show();
    }
}

class Fu {
    String name = "Fu";
    String hobby = "喝茶";
}

class Zi extends Fu {
    String name = "zi";
    String game = "吃鸡";

    public void show() {
        //如何打印zi
        System.out.println(name);
        System.out.println(this.name);
        // 如何打印Fu
        System.out.println(super.name);
        //如何打印喝茶
        System.out.println(super.hobby);
        //如何打印吃鸡
        System.out.println(this.game);
    }
}package myextends.extendsdemo6;

public class Test {
    public static void main(String[] args) {
        Student s = new Student();
        s.lunch();

        OverseasStudent os = new OverseasStudent();
        os.lunch();
    }
}

class Person {
    public void eat() {
        System.out.println("吃米饭，吃菜");
    }

    public void drink() {
        System.out.println("喝开水");
    }
}

class OverseasStudent extends Person{
    public void lunch() {
        this.eat();
        this.drink();

        super.eat();
        super.drink();
    }
    //当父类的方法不能满足子类现在的需求时，需要进行方法重写
    //需要加上@Override
    @Override
    public void eat() {
        System.out.println("吃意大利面");
    }
    @Override
    public void drink() {
        System.out.println("喝凉水");
    }

}


class Student extends Person {
    public void lunch() {
        ////先在本类中查看eat和drink方法，就会调用子类的，如果没有，就会调用从父类中继承下来的eat和drink方法

        eat();
        drink();

        //直接调用父类的eat和drink方法
        super.eat();
        super.drink();
    }
}

4.继承中: 成员变量的访问特点
5.继承中: 成员方法的访问特点
6。继承中: 构造方法的特点
就近原则:谁离我近，我就用谁
1.继承中成员变量访问特点: 就近原则
先在局部位置找，本类成员位置找，父类成员位置找，逐级往上
2.如果出现了重名的成员变量怎么办?
System.out.println(name);System.out.printIn(this.name);System.out.printIn(super .name);

继承中: 成员方法的访问特点
直接调用满足就近原则:谁离我近，我就用谁
super调用，直接访问父类


方法的重写
当父类的方法不能满足子类现在的需求时，需要进行方法重写
书写格式
在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法
Override重写注解
1.@OvSrride是放在重写后的方法上，校验子类重写时语法是否正确
2.加上注解后如果有红色波浪线，表示语法错误
3.建议重写方法都加@Override注解，代码安全，优雅!
方法重写的本质   虚方法表中如果发生了重写，则会覆盖
方法重写注意事项和要求
1.重写方法的名称、形参列表必须与父类中的一致。
2.子类重写父类方法时，访问权限子类必须大于等于父类暂时了解:空着不写<protected< public)3.子类重写父类方法时，返回值类型子类必须小于等于父类
4.建议: 重写的方法尽量和父类保持一致。
5.只有被添加到虚方法表中的方法才能被重写


1.继承中成员方法的访问特点
this调用: 就近原则super调用: 直接找父类
2.什么是方法重写?
在继承体系中，子类出现了和父类中一模一样的方法声明我们就称子类的这个方法是重写的方法
3.方法重写建议加上哪个注解，有什么好处?@Override注解可以校验重写是否正确，同时可读性好
重写方法有哪些基本要求?4
子类重写的方法尽量跟父类中的方法保持一致
只有虚方法表里面的方法可以被重写
5.方法重写的本质?
覆盖虚方法表中的方法
