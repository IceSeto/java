方法是程序中的最小执行单位
打包调用方法---提高代码的复用性 提高代码的可维护性
1.打包
（1）无参数最简单格式
public static void 方法名(){
  方法体（打包的代码）;
}  
（2）带参数格式
public static void 方法名(参数1,参数2,………………){
  ……………………
}
（3）带返回值方法定义
public static 返回值类型 方法名（参数）{
  方法体；
  return 返回值;
}
2.调用
（1）无参数最简单格式
方法名();
（2）带参数格式
方法名(参数1,参数2,…………);
（3）带返回值方法调用
  1.直接调用
  方法名（实参）
  2.赋值调用
  整数类型 变量名 = 方法名（实参）;
  3.输出调用
  System.out.println(方法名（实参）);

注意！ 方法调用时（形参与实参一一对应）参数的数量和类型必须于方法定义中小括号里的变量一一对应，否则将报错。
形参与实参
形参：方法定义中的参数
实参：方法调用中的参数
package methoddemo;
public class MethodDemo1 {
    public static void main(String[] args) {
        //目标：掌握最简单的方法定义和调用的格式
        //调用方法
        playGame();
        playGame();
    }
    //定义应该方法
    public static void playGame(){
        System.out.println("选人物");
        System.out.println("准备开局");
        System.out.println("对线");
        System.out.println("崩盘");
        System.out.println("骂队友");
        System.out.println("送人头");
        System.out.println("GG");
    }
}

package methoddemo;
public class MethodDemo2 {
    public static void main(String[] args) {
        //目标：利用方法最简单的格式完成联系
        //调用方法
        printGFInfo();
    }
    public static void printGFInfo(){
        System.out.println("逍");
        System.out.println("萌妹子");
        System.out.println("18岁");
    }
}

package methoddemo;
public class MethodDemo3 {
    public static void main(String[] args) {
        //目标；利用方法最简单的格式完成
        //需求：在方法里定义两个变量并打印求和
        getSum();
    }
    public static void getSum(){
        int num1 = 10;
        int num2 = 20;
        int result = num1 + num2;
        System.out.println(result);
    }
}

package methoddemo;
public class MethodDemo4 {
    public static void main(String[] args) {
        //带参数方法定义与调用
        getSum(10,20);
    }
    public static void getSum(int sum1,int sunm2){
        int result = sum1 + sunm2;
        System.out.println(result);
    }
}

package new1.test;

public class Test1 {
    public static void main(String[] args) {
        //需求：定义应该方法，求正方形的周长，将结果在方法中打印。
        //目标：根据不同的需求，选择定义无参的方法，还是带参数的方法
    getLength(20.2,22.3);
    }
        //1.我要干嘛 求长方形的周长
        //2.干这件事情需要什么 长宽
    public static void getLength(double len,double width){
        double result = ( len + width ) * 2;
        System.out.println(result);
    }
}

package new1.test;

public class Test2 {
    public static void main(String[] args) {
        //需求：定义应该方法，求正方形的周长，将结果在方法中打印。
        //目标：根据不同的需求，选择定义无参的方法，还是带参数的方法
        getArea(22.1);
    }

    //1我要干嘛 求圆面积
    //2需要什么 半径的平方
    public static void getArea( double radius){
        double result = 3.14 * radius *radius;
        System.out.println(result);
    }
}
package new1.methoddemo;

public class MethodDemo5 {
    public static void main(String[] args) {
        //掌握带返回值方法的定义和调用

        //直接调用
        getSum(10,20,30);
        //赋值调用
        int sum = getSum(10,20,30);
        System.out.println(sum);
        //输出调用
        System.out.println(getSum(10,20,30));

        //计算第一个季度的营业额
        int num1 = getSum(10,20,30);
        //二
        int num2 = getSum(10,20,30);
        //三
        int num3 = getSum(10,20,30);
        //四
        int num4 = getSum(10,20,30);
        //求全年的营业额
        int num = num1 + num2 + num3 + num4;
        System.out.println(num);
    }
    public static int getSum(int num1,int num2,int num3){
        int result = num1 + num2 + num3;
        return result;//返回给方法的调用处
    }
}

package new1.test;

public class Test3 {
    public static void main(String[] args) {
        //目标；要能区分出什么时候使用带返回值的方法
        //需求；定义方法，比较两个长方形的面积
        //调用方法获取长方形的面积在比较
        double area1 = getArea(4.6,3.3);
        double area2 = getArea(7.2,2.4);

        if(area1 > area2){
            System.out.println("第一个大");
        }else{
            System.out.println("第二个大");
        }
    }
        //定义一个方法求长方形面积
        //1.我要干嘛?求长方形的面积
        //2.需要什么? 长 和 宽
        //3.方法的调用处，是否需要继续使用方法的结果//如果要用，那么方法必须有返回值
        //如果不要用，方法可以写返回值，也可以不写返回值
    public static double getArea(double len,double width){
        double area = len * width;
        return area;
    }


    //在以后实际开发当中，我们一般是把重复的代码或者具有独立功能的代码抽取到方法当中。//以后我们直接调用就可以了
//1.我要干嘛?比较两个长方形的面积
//2.需要什么? 两个长 两个宽
    /*public static void compare(double len1, double width1, double len2, double width2)
    (double areal = len1 * width1;
    double area2 = len2 * width2;
    if(area1 > area2)f
    System.out.printIn("第一个长方形更大");}
    else
    (System.out.printIn("第二个长方形更大");
        }
        }*/
}
