权限修饰符
权限修饰符:是用来控制一个成员能够被访问的范围的可以修饰成员变量，方法，构造方法，内部类
权限修饰符的分类
有四种作用范围由小到大 ( private < 空着不写 < protected < public）
private私房钱，只能自己用
默认只能本包中能用
受保护的protected
public公共的
权限修饰符的使用规则
实际开发中，一般只用private和public
成员变量私有
方法公开
特例:如果方法中的代码是抽取其他方法中共性代码，这个方法一般也私有。
package myjurisdiction.jurisdictiondemo1;

public class Animal {
    public String name;

    public void show(){
        System.out.println(name);
    }
}
package myjurisdiction.jurisdictiondemo1;

public class Test {
    public static void main(String[] args) {
        Animal a = new Animal();
        System.out.println(a.name);
    }
}
package myjurisdiction.jurisdictiondemo2;

import myjurisdiction.jurisdictiondemo1.Animal;

public class Dog extends Animal {
    public void show(){
        System.out.println(name);
    }
}
package myjurisdiction.jurisdictiondemo2;

import myjurisdiction.jurisdictiondemo1.Animal;

public class Test {
    public static void main(String[] args) {
        Animal a = new Animal();
        System.out.println(a.name);
    }
}
静态代码块
格式: static
特点:需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次使用场景:在类加载的时候，做一些数据初始化的时候使用
1.代码块的分类:
局部代码块，构造代码块，静态代码块
2.局部代码块的作用
提前结束变量的生命周期 (已淘汰 )
3.构造代码块的作用抽取构造方法中的重复代码 (不够灵活
静态代码块的作用数据的初始化 (重点
package mycodeblock.codeblockdemo1;

public class Test {
    public static void main(String[] args) {



        {
            int a = 10;
        }//当代码执行到这里 变量a 就消失了
       //System.out.println(a);
    }
}
package mycodeblock.codeblockdemo2;

public class Student {
    private String name;
    private int age;

    //构造代码块 ；
    //1 写在成员位置的代码块
    //2 作用 可以把多个构造方法中的重复的代码抽取出来
    //3 执行时机； 创建本类对象时 会先执行构造代码块 在执行构造方法
    //这种写法 渐渐淘汰
    {
        System.out.println("开始创建对象");
    }

    public Student() {
        System.out.println("空参构造");
    }

    public Student(String name, int age) {
        System.out.println("带参构造");

        this.name = name;
        this.age = age;
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Student{name = " + name + ", age = " + age + "}";
    }
}
package mycodeblock.codeblockdemo2;

public class Test {
    public static void main(String[] args) {

        Student s1 = new Student();

        Student s2 = new Student("zhangsan", 21);
    }
}
package mycodeblock.codeblockdemo3;

public class Student {
    private String name;
    private int age;


    //执行时机
    //随着类的加载而加载的 并且 只执行依次

    {
        System.out.println("cjdx");
    }
    static {
        System.out.println("111");
    }
    public Student() {
    }

    public Student(String name, int age) {

        this.name = name;
        this.age = age;
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Student{name = " + name + ", age = " + age + "}";
    }
}
package mycodeblock.codeblockdemo3;

public class Test {
    public static void main(String[] args) {

        Student s1 = new Student();

        Student s2 = new Student("zhangsan", 21);
    }
}
