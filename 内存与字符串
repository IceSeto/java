栈内存：方法运行时进栈 执行完毕出栈
堆内存：new出来的对象在堆中 每new一次就是开辟一块新的空间
方法区：字节码文件 .class文件 临时存储的地方
StringTable(串池)：只有直接赋值的字符串存在串池中 new出来的字符串不在串池中 本质在堆内存中
当使用双引号直接赋值时，系统会检查该字符串在串池中是否存在
不存在:创建新的
存在:复用
扩展底层原理1: 字符串存储的内存原理
直接赋值会复用字符串常量池中的
new出来不会复用，而是开辟一个新的空间
扩展底层原理2: ==号比较的到底是什么?
基本数据类型比较数据值
引用数据类型比较地址值
扩展底层原理3: 字符串拼接的底层原理
1.没有变量参与
拼接的时候没有变量，都是字符串。
触发字符串的优化机制。
在编译的时候就已经是最终的结果了。
在拼接的时候有变量
JDK8以前底层会使用StringBuilder
扩展底层原理3: 字符串拼接的底层原理
会复用串池中的字符串如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，
如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存。
扩展底层原理4: StringBuilder提高效率原理图
所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存
扩展底层原理5: StringBuilder源码分析
默认创建一个长度为16的字节数组添加的内容长度小于16，
直接存添加的内容大于16会扩容(原来的容量*2+2)
如果扩容之后还不够，以实际长度为准
