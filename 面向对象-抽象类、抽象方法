抽象方法
抽象方法:将共性的行为 (方法)抽取到父类之后由于每一个子类执行的内容是不一样所以，在父类中不能确定具体的方法体该方法就可以定义为抽象方法
抽象类:如果一个类中存在抽象方法，那么该类就必须声明为抽象类
抽象类和抽象方法的定义格式抽象方法的定义格式publicabstract 返回值类型 方法名(参数列表)抽象类的定义格式:
public abstract class 类名{}
抽象类和抽象方法的注意事项
抽象类不能实例化
抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类
可以有构造方法
抽象类的子类
要么重写抽象类中的所有抽象方法
要么是抽象类


1.抽象类的作用是什么样的?
抽取共性时，无法确定方法体，就把方法定义为抽象的强制让子类按照某种格式重写抽象方法所在的类，必须是抽象类
2抽象类和抽象方法的格式?
public abstract 返回值类型 方法名(参数列表)
public abstract class 类名
3.继承抽象类有哪些要注意?
要么重写抽象类中的所有抽象方法
要么是抽象类
package myabstract.abstractdemo1;

public abstract class Person {

    private String name;
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    //当创建子类对象时 给子类赋值
    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public abstract void work();

    public void sleep(){
        System.out.println("睡觉");
    }
}
package myabstract.abstractdemo1;

public class Student extends Person{

    public Student() {
    }

    public Student(String name, int age) {
        super(name, age);
    }

    @Override
    public void work() {
        System.out.println("学生的工作是学习");
    }
}
package myabstract.abstractdemo1;

public abstract class Teacher extends Person {
}
package myabstract.abstractdemo1;

public class Test {
    public static void main(String[] args) {
        //创建对象 报错 不能
        //Person p = new Person() ;

        Student s = new Student("zhangsan",25);

        System.out.println(s.getAge() + s.getName());
        s.work();
        s.sleep();
    }
}
package myabstract.abstractdemo1;

public class ATeacher extends Person{
    @Override
    public void work() {

    }
}
package myabstract.abstractdemo2;

public abstract class Animal {
    private String name;
    private int age;

    public Animal() {
    }

    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public abstract void eat();
    public void drink(){
        System.out.println("喝水");
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Animal{name = " + name + ", age = " + age + "}";
    }
}
package myabstract.abstractdemo2;

public class Dog extends Animal{
    public Dog() {
    }

    public Dog(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("狗吃骨头");
    }
}
package myabstract.abstractdemo2;

public class Frog extends Animal{
    public Frog() {
    }

    public Frog(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("青蛙吃虫子");
    }
}
package myabstract.abstractdemo2;

public class Sheep extends Animal{
    public Sheep() {
    }

    public Sheep(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("羊吃草");
    }
}
package myabstract.abstractdemo2;

public class Test {
    public static void main(String[] args) {
        Dog d = new Dog();
        Frog f = new Frog();
        Sheep s = new Sheep();

        d.eat();
        f.eat();
        s.eat();
    }
}
