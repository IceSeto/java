接口就是一种规则，是对行为的抽象
接口的定义和使用
接口用关键字interface来定义public interface 接口名
接口不能实例化
接口和类之间是实现关系，通过implements关键字表示public class 类名 implements 接口名#接口的子类(实现类)
要么重写接口中的所有抽象方法
要么是抽象类
注意1: 接口和类的实现关系，可以单实现，也可以多实现。public class 类名 implements 接口名1，接口名2#注意2:实现类还可以在继承一个类的同时实现多个接口。
public class 类名 extends 父类implements 接口名1，接口名2#

接口中成员的特点成员变量
只能是常量
public static final默认修饰符:构造方法
没有
成员方法
只能是抽象方法
默认修饰符: public abstractJDK7以前: 接口中只能定义抽象方法
JDK8的新特性:接口中可以定义有方法体的方法
JDK9的新特性: 接口中可以定义私有方法

接口和类之间的关系
类和类的关系
继承关系，只能单继承，不能多继承，但是可以多层继承类和接口的关系
实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口接口和接口的关系
继承关系，可以单继承，也可以多继承
package myinterface.interfacedemo1;

public abstract class Animal {
    private String name;
    private int age;

    public abstract void eat();

    public Animal() {
    }

    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    /**
     * 获取
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * 设置
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * 获取
     * @return age
     */
    public int getAge() {
        return age;
    }

    /**
     * 设置
     * @param age
     */
    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
        return "Animal{name = " + name + ", age = " + age + "}";
    }
}
package myinterface.interfacedemo1;

public class Dog extends Animal implements Swim{
    public Dog() {
    }

    public Dog(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("狗吃骨头");
    }

    @Override
    public void swim() {
        System.out.println("狗刨");
    }
}
package myinterface.interfacedemo1;

public class Frog extends Animal implements Swim{
    public Frog() {
    }

    public Frog(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("青蛙吃虫子");
    }

    @Override
    public void swim() {
        System.out.println("蛙泳");
    }
}
package myinterface.interfacedemo1;

public class Rabbit extends Animal{
    public Rabbit() {
    }

    public Rabbit(String name, int age) {
        super(name, age);
    }

    @Override
    public void eat() {
        System.out.println("兔子吃草");
    }
}
package myinterface.interfacedemo1;

public interface Swim {

    public abstract void swim();

}
package myinterface.interfacedemo1;

public class Test {
    public static void main(String[] args) {

        Frog f = new Frog();
        Dog d = new Dog();
        Rabbit r = new Rabbit();

        f.eat();
        f.swim();

        d.eat();
        d.swim();

        r.eat();
    }
}
package myinterface.interfacedemo2;

public interface Inter {
    //public static final
    public static final int a = 10;
    public abstract void method();

}
package myinterface.interfacedemo2;

public class InterImpl implements Inter{
    @Override
    public void method() {
        System.out.println("method");
    }
}
package myinterface.interfacedemo2;

import java.util.Scanner;

public class Test {
    public static void main(String[] args) {

        System.out.println(Inter.a);

//        Inter.a = 20;


        InterImpl impl = new InterImpl();
        impl.method();


        Scanner sc = new Scanner(System.in);
        sc.next();
    }
}
package myinterface.interfacedemo3;

public interface Inter1 {
    public abstract void method1();
    public abstract void method2();
    public abstract void method3();
}
package myinterface.interfacedemo3;

public interface Inter2 {
    public abstract void method1();
    public abstract void method2();
    public abstract void method3();
    public abstract void method4();

}
package myinterface.interfacedemo3;

public class Test implements Inter1,Inter2{
    @Override
    public void method1() {
        System.out.println("method1");
    }

    @Override
    public void method2() {
        System.out.println("method2");
    }

    @Override
    public void method3() {
        System.out.println("method3");
    }

    @Override
    public void method4() {
        System.out.println("method4");
    }


    // 类和接口之间的关系:
    //实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口
}
package myinterface.interfacedemo4;

public interface Inter1 {
    public abstract void method1();
}
package myinterface.interfacedemo4;

public interface Inter2 {
    public abstract void method2();
}
package myinterface.interfacedemo4;

public interface Inter3 extends Inter1,Inter2{
    public abstract void method3();
}
package myinterface.interfacedemo4;

public class InterImpl implements Inter3{
    @Override
    public void method1() {

    }

    @Override
    public void method2() {

    }

    @Override
    public void method3() {

    }
}
package myinterface.interfacedemo4;

public class Test {
    public static void main(String[] args) {

        //接口和接口之间是继承关系 可以单继承 也可以多继承
        // 如果实现类实现了最下面的子接口的话 就需要重写所有子接口

    }
}
